//package com.rim.default_explain;
//
//
//	public class Default {
//		
//		package 패키지명;
//		import 풀패키지명;
//		
//		
//		접근지정자 [그외지정자] class 클래스명 [extends 부모클래스명 implments 인터페이스1, 인터페이스2...]{
//		
//			//멤버변수
//			접근지정자 [그외지정자] 데이터타입 변수명;
//			//클래스변수
//			접근지정자 static 데이타타입 변수명;
//			
//			//생성자
//			접근지정자 클래스명([매개변수 선언]){}
//			
//			//멤버메서드
//			접근지정자 [그외지정자] 리턴타입 메서드명([매개변수 선언]){
//				//지역변수 선언
//				데이터타입 변수명;
//				
//				//사용할 클래스의 객체 만드는 공식. 지역변수 선언과 동일
//				사용할클래스명 참조변수명(변수) = new 생성자();
//				//만든 객체의 멤버를 사용
//				
//				//멤버변수에 값을 저장
//				 * 참조변수명.멤버변수명=값
//				//멤버변수의 값을 불러
//				 * 멤버변수와같은 데이터타입 변수명 =참조변수명.멤버변수명
//				
//				//멤버메서드 리턴이 없고 매개변수도없는 경우
//				 * 참조변수명.메서드명()
//				//멤버메서드 리턴이 없고 매개변수도있는 경우
//				 * 참조변수명.메서드명(매개변수와같은 데이터타입의 데이타)
//				//멤버메서드 리턴이 있고 매개변수가 없는 경우
//				 *리턴데이터타입과 같은데이타타입의 변수명 = 참조변수명.메서드명()
//				//멤버메서드 리턴이 있고 매개변수도 있 경우    
//				 *리턴데이터타입과 같은데이타타입의 변수명 = 참조변수명.메서드명(매개변수와같은 데이터타입의 데이타)
//				
//				//클래스변수 사용
//				 * 클래스명.변수명
//				//클래스메서드 사용
//				 * 클래스명.메서드명()  
//				
//			}
//			
//			//클래스메서드
//			접근지정자 static 리턴타입 메서드명([매개변수 선언]){} 	
//			
//		}
//		
//		//접근지정자
//		 * public - 어디서든 사용이 가능
//		 * protected - 같은 패키지에서만 사용이가능, 단 상속관계에서는 접근이 가능
//		 * default - 같은 패키지내에서만 사용이 가능
//		 * private - 같은 클래스내에서만 사용이 가능
//		 
//		//그외지정자
//		 * abstract
//		 	- class 선언부 : 클래스를 상속해서 사용
//		 	- 메서드    선언부 : 상속해서 오버라이딩 사용
//		 * static  
//		  	- 메서드    선언부  : 클래스메서드 
//		  	- 멤버변수 선언부   : 클래스변수
//		 * final
//		    - class 선언부   : 클래스를 상속 불가
//		    - 메서드    선언부   : 오버라이딩 불가
//		    - 변수       선언부   : 상수로 사용(값변경 불가) 	
//	
//}
